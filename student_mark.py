# -*- coding: utf-8 -*-
"""Student_Mark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DRZ_2_5E4j_PhVcwlcJf4NaeQXT_g2Kg

<h1 align=center><font size = 6>Grade Estimation with Multiple and Polynomial Regression Models</font></h1>

<img src="https://f.hubspotusercontent10.net/hubfs/8511569/collegedata/images/article/5-free-admissions-resources.jpg" height=400 width=1000 alt="https://www.collegedata.com/resources/explore-your-options/5-free-college-admission-resources-every-high-schooler-needs">

<small>Picture Source:<a href="https://www.collegedata.com/resources/explore-your-options/5-free-college-admission-resources-every-high-schooler-needs">collegedata</a></small>

<br>

<h2>Introduction</h2>
<p>In this project, grade estimation was made through Multiple linear and Polynomial regression models in line with the number of courses and the time they worked.</p>

<br>

<h2>Objective:</h2>
<ol>
  <li>Understand the dataset & cleanup (if required).</li>
  <li>Seperate data as depended and independed (<i>x, y</i>)</li>
  <li>Make <i>Train/Test split</i></li>
  <li>Build <i>Multiple regression model</i>, evaluate the model and make predictions.</li>
  <li>Build <i>Polynomial regression model</i>,  evaluate the model and make predictions.</i>
</ol>

<br>

<h2>Keywords</h2>
<ul>
  <li>Polynomial regression</li>
  <li>Multiple regression</li>
  <li>Degree</li>
  <li>Computer Science</li>
  <li>Education</li>
</ul>

<br>

<h2>Table of Contents</h2>

<div class="alert alert-block alert-info" style="margin-top: 20px">
<li><a href="https://#import">Import Libraries</a></li>
<li><a href="https://#data_preparation">Dataset Preparation</a></li>
<li><a href="https://#mul_reg">Multiple Regression Model</a></li>
<li><a href="https://#pol_reg">Polynomial Regression</a></li>

<br>

<p></p>
Estimated Time Needed: <strong>15 min</strong>
</div>

<br>
<h2 align=center id="import">Import Libraries</h2>
<p>The following are the libraries we are going to use for this lab:</p>
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings("ignore")
# %matplotlib inline

df = pd.read_csv('Student_Marks.csv')

"""<br>
<h2 align=center id="data_preparation">Dataset Preparation</h2>
"""

df.head() #  Take a look at the dataset

df.info() #  Looking for the missing values

df.describe()

df.isnull().sum()

"""<h3>Relation Between Time Study and Marks</h3>"""

plt.scatter(df.time_study, df.Marks,  color='blue')
plt.xlabel("Time Study")
plt.ylabel("Marks")

"""<h3>Relation Between Number Courses and Time Study</h3>"""

plt.scatter(df.number_courses, df.time_study,  color='red')
plt.xlabel("Number Courses")
plt.ylabel("Time Study")

"""<h3>Relation Between Marks Study and Number Courses</h3>"""

plt.scatter(df.Marks, df.number_courses, color='green')
plt.xlabel("Marks")
plt.ylabel("Number Courses")

"""<h3>Creating Train and Test Dataset</h3>

<br>

<p>Train/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. This will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the model. Therefore, it gives us a better understanding of how well our model generalizes on new data.</p>

<p>We know the outcome of each data point in the testing dataset, making it great to test with! Since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it is truly an out-of-sample testing. Let's split our dataset into train and test sets. Around 80% of the entire dataset will be used for training and 20% for testing. We create a mask to select random rows using the <code>np.random.rand()</code>:</p>
"""

msk = np.random.rand(len(df)) < 0.8
train = df[msk]
test = df[~msk]

"""<h3>Train Distribution</h3>"""

plt.scatter(train.time_study, train.Marks)
plt.xlabel('Time Study')
plt.ylabel('Marks')

"""<h3>Test Distribution</h3>"""

plt.scatter(test.time_study, test.Marks)
plt.xlabel('Time Study')
plt.ylabel('Marks')

"""<br>
<h2 align=center id="mul_reg">Multiple Regression Model</h2>

<p>In reality, there are multiple variables that impact the <b>Marks</b>. When more than one independent variable is present, the process is called <i>multiple linear regression</i>. An example of <i>multiple linear regression</i> is predicting <b>Marks</b> using the features <b>number_courses</b> and <b>time_study</b> of students. The good thing here is that multiple linear regression model is the extension of the simple linear regression model.</p>
"""

from sklearn import linear_model
regr = linear_model.LinearRegression()
x = np.asanyarray(train[['number_courses', 'time_study']])
y = np.asanyarray(train[['Marks']])
regr.fit(x, y)
# The coefficients
print('Coefficients: ', regr.coef_)
print('Intercept: ', regr.intercept_)

"""$$ùë¶ÃÇ = -7.85213335 + (1.9056802 ‚ãÖ X_{1}) + (5.46843542 ‚ãÖ X_{2})$$

<br>

<p><i>Coefficient</i> and <i>Intercept</i> are the parameters of the fitted line. Given that it is a multiple linear regression model with 3 parameters and that the parameters are the intercept and coefficients of the hyperplane, sklearn can estimate them from our data. <i>Scikit-learn </i>uses plain <i>Ordinary Least Squares (OLS)</i> method to solve this problem.</p>

<h3>Ordinary Least Squares (OLS)</h3>

<br>

<p><i>OLS</i> is a method for estimating the unknown parameters in a linear regression model. <i>OLS</i> chooses the parameters of a linear function of a set of explanatory variables by minimizing the sum of the squares of the differences between the target dependent variable and those predicted by the linear function. In other words, it tries to minimizes the <i>sum of squared errors (SSE)</i> or <i>mean squared error (MSE)</i> between the target variable <i>(y) and our predicted output <i>(ùë¶ÃÇ)</i> over all samples in the dataset.</p>
"""

# Commented out IPython magic to ensure Python compatibility.
y_hat = regr.predict(test[['number_courses', 'time_study']])
x = np.asanyarray(test[['number_courses', 'time_study']])
y = np.asanyarray(test[['Marks']])
print("Residual sum of squares: %.2f"
#       % np.mean((y_hat - y) ** 2))

# Explained variance score: 1 is perfect prediction
print('Variance score: %.2f' % regr.score(x, y))

"""<h3>Making Predictions</h3>

<p>If you work 8 hours to 7 lectures:</p>
"""

regr.predict([[7, 8]])

"""<p>If you work 1 hours to 7 lectures:</p>"""

regr.predict([[7, 1]])

"""<br>
<h2 align=center id="pol_reg">Polynomial Regression</h2>

<h3>Importing Libraries for Polynomial Regression</h3>
"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn import linear_model

train_x = np.asanyarray(train[['time_study']])
train_y = np.asanyarray(train[['Marks']])

test_x = np.asanyarray(test[['time_study']])
test_y = np.asanyarray(test[['Marks']])


poly = PolynomialFeatures(degree=3)
train_x_poly = poly.fit_transform(train_x)
train_x_poly

clf = linear_model.LinearRegression()
train_y_ = clf.fit(train_x_poly, train_y)
# The coefficients
print('Coefficients: ', clf.coef_)
print('Intercept: ', clf.intercept_)

plt.scatter(train.time_study, train.Marks,  color='blue')
XX = np.arange(0.0, 9.0, 0.1)
yy = clf.intercept_[0] + clf.coef_[0][1] * XX + clf.coef_[0][2] * np.power(XX, 2) + clf.coef_[0][3] * np.power(XX, 3)
plt.plot(XX, yy, '-r')
plt.xlabel('Time Study')
plt.ylabel('Marks')

"""<h3>Making Predictions</h3>

<p>If you'd work 5 hours:</p>
"""

print("\nPolinomial Regression(degree=3):")
print(train_y_.predict(poly.fit_transform([[5]])))

"""<h3>Evaluation</h3>"""

from sklearn.metrics import r2_score

test_x_poly = poly.fit_transform(test_x)
test_y_ = clf.predict(test_x_poly)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_ - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_ - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y, test_y_))

Ks = 11
mean_acc = np.zeros((Ks-1))

for i in range(1, Ks):
    poly = PolynomialFeatures(degree=i)
    train_x_poly = poly.fit_transform(train_x)
    
    clf = linear_model.LinearRegression()
    train_y_ = clf.fit(train_x_poly, train_y)
    test_x_poly = poly.fit_transform(test_x)
    test_y_ = clf.predict(test_x_poly)
    
    print(f"\nDegree {i}")
    print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_ - test_y)))
    print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_ - test_y) ** 2))
    print("R2-score: %.2f" % r2_score(test_y, test_y_))
    
    mean_acc[i-1]=r2_score(test_y, test_y_)

mean_acc

plt.plot(range(1, Ks), mean_acc, 'g')
plt.ylabel('R2 Score')
plt.xlabel('Number of Degrees')
plt.tight_layout()
plt.show()

print("The best accuracy was with", mean_acc.max(), "with degree=", mean_acc.argmax() + 1)

"""<h1>Contact Me</h1>
<p>If you have something to say to me please contact me:</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/Doguilmak">Doguilmak</a></li>
  <li>Mail address: doguilmak@gmail.com</li>
</ul>
"""

from datetime import datetime
print(f"Changes have been made to the project on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")